# ======================= kefu server configuration ===============
kefu.server.mode.read_only=false
kefu.schedule.redis.enable=true
# ======================= spring boot configuration ===============
spring.aop.auto=true
spring.aop.proxy-target-class=true
server.session.timeout=18000
spring.velocity.check-template-location=false
spring.velocity.enabled=false
spring.resources.add-mappings=false
spring.mvc.favicon.enabled=false
spring.jmx.enabled=false
multipart.enabled=false
multipart.max-file-size=10MB
# management configuration
management.security.enabled=true
management.context-path=/management
endpoints.health.sensitive=false
#security configuration
security.user.name=kefu-admin
security.user.password=593d9dc725c8caf8a21e6f12337d3271
security.user.role=ADMIN
security.basic.path=/management

# ======================= database configuration ==================
# 数据库连接信息, 同一个部署应该都是一样的
# local
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/robot?useUnicode=true&characterEncoding=utf8&autoReconnect=true&rewriteBatchedStatements=TRUE
spring.datasource.username=root
spring.datasource.password=1234
# 线上
#spring.datasource.url=jdbc:mysql://rds3nk746ykmj16l4100.mysql.rds.aliyuncs.com:3306/weichat?useUnicode=true&characterEncoding=utf8&autoReconnect=true&rewriteBatchedStatements=TRUE
#spring.datasource.username=kefu_test_ro
#spring.datasource.password=kefu_test_ro
# 99
#spring.datasource.url=jdbc:mysql://rdsde3o0kicy5j484u80.mysql.rds.aliyuncs.com:3306/weichat?useUnicode=true&characterEncoding=utf8&autoReconnect=true&rewriteBatchedStatements=TRUE
#spring.datasource.username=chuchu_readonly
#spring.datasource.password=chuchu_readonly

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.max-active=5
spring.datasource.min-idle=1
spring.datasource.max-idle=1
spring.datasource.maximum-pool-size=10
spring.datasource.initial-size=1

spring.secondary.datasource.url=jdbc:mysql://127.0.0.1:3306/weichat?useUnicode=true&characterEncoding=utf8&autoReconnect=true&rewriteBatchedStatements=TRUE
spring.secondary.datasource.username=root
spring.secondary.datasource.password=1234
spring.secondary.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.secondary.datasource.max-active=5
spring.secondary.datasource.min-idle=1
spring.secondary.datasource.max-idle=1
spring.secondary.datasource.maximum-pool-size=10
spring.secondary.datasource.initial-size=1

# ======================= hibernate configuration ================
spring.jpa.hibernate.naming_strategy=org.hibernate.cfg.DefaultNamingStrategy
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.show_sql=false
# cache
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false
spring.jpa.properties.hibernate.cache.infinispan.use_synchronization=true
spring.jpa.properties.hibernate.cache.region.factory_class=org.hibernate.cache.infinispan.InfinispanRegionFactory
spring.jpa.properties.hibernate.cache.infinispan.cfg=infinispan.xml
spring.jpa.properties.hibernate.generate_statistics=false

#spring.cache.infinispan.config=infinispan.xml
# ======================= redis configuration =====================
# 因为现在都是连本机的redis, 这个应该不需要修改, 同时保证每个kefu的机器上都有一个redis在监听 127.0.0.1
spring.redis.host=127.0.0.1
spring.redis.password=
spring.redis.port=6379
spring.redis.pool.max-idle=5
spring.redis.pool.min-idle=5
spring.redis.pool.max-active=10
spring.redis.pool.max-wait=-1
spring.redis.pool.max-total=50
spring.redis.timeout= 2000

# 收消息的topic
redis.message.consumer.topic=kf:conn:inmessages:migration

# =====================  robot properties  ======================
# global enable or disable robot
robot.enable=false
# timeout for reading robot schedule event from redis
robot.schedule.redis.timeout=10
# appkey and app secret to access xiaoi api
robot.root.appkey=IFzYxUPqUeBV
robot.root.appsecret=8ZrZIDmrKNdu2dQikaVh


#用来判断消息是否重复的redis
jedis.pool.message.host=127.0.0.1
jedis.pool.message.port=6379
jedis.pool.message.timeout=2000
redis.msgid.topic.prefix=kf:msgid:
#redis.msgid.expire=

# ======================= thrift server configuration =============
#connector中启动的thrift server的地址和端口号
connector.urls=127.0.0.1:9813
#connector中是否启用的是kafka模式
weichat.connector.use_kafka_agent=false
#thrift server 启动的ip地址, 使用kafka读取客服消息时，需要在每一个kafka集群上启动一个consumer及对应的thriftserver供客服系统调用，不是kafka读取模式不需要特意设置
#对应在beijing集群上启动kafka consumer及其thriftserver的ip,该IP需要为公网IP
weichat.thrift.server.beijing.host=127.0.0.1
#thrift server 启动的端口号
weichat.thrift.server.beijing.port=9813
#对应在vip1集群上启动kafka consumer及其thriftserver的ip,该IP需要为公网IP
weichat.thrift.server.vip1.host=127.0.0.1
#thrift server 启动的端口号
weichat.thrift.server.vip1.port=9814

# ======================= ganglia report ==========================
# metrics report 到ganglia的地址和端口, 留空的话则不会report到ganglia
# 等于之前的  -Dreporter.ganglia.host=sdb-ali-hangzhou-log -Dreporter.ganglia.port=8684
reporter.ganglia.host=
# 注意, 这个属性需要或者不存在或者给一个数字的值, 不能留空
reporter.ganglia.port=8649


#================== The tenant apps management ================
tenant.apps.org.mgr.domain=a1.easemob.com
tenant.apps.org.mgr.port=80
tenant.apps.org.mgr.user=achen@easemob.com
tenant.apps.org.mgr.password=ZAQ!@WSX
tenant.apps.org.id=easemobkefu
#==============
# 是否写入测试账号, 沙箱和生产环境应该都不需要, 这只是一个本地的开发环境的选项
# 等于之前的-Dtest.DemoGeustTenant=false
create.test.data=false
# 设置好客服系统的域名，给微博发送图片时获取图片地址使用
weichat.webserver.host=http://kefu.easemob.com

# ======================= 微博微信 configuration =============
#环信在微信开放平台上开通的第三方平台[环信移动客服]对应的appId
weichat.weixin.open.component_appid=wxd296f9605fee5e76
#环信在微信开放平台上开通的第三方平台[环信移动客服]对应的appsecret
weichat.weixin.open.component_appsecret=0c79e1fa963cd80cc0be99b20a18faeb
#公众号消息校验Token
weichat.weixin.open.token=test1234567890nihao
#公众号消息加解密Key
weichat.weixin.open.encodingaeskey=f5bLeik5BmeQ5OnvmGIloGwx2IWVQ3LmoA5m2MPMpNK
#环信官方微博创建的微应用【环信在线】的appkey
weichat.weibo.appkey=869840255
#环信官方微博创建的微应用【环信在线】的setcret
weichat.weibo.app_secret=79a68a6a61d5023d6729795b17dcaee1


# ============================ 体验关联设置 ==========================
#体验关联功能是否启动
weichat.tenants.experienceChannel.enable=false
#体验关联号池范围
weichat.tenants.experienceChannel.min=100000
weichat.tenants.experienceChannel.max=199999
#体验关联APPKEY配置
weichat.tenants.experienceChannel.orgName=sipsoft
weichat.tenants.experienceChannel.appName=sandbox
weichat.tenants.experienceChannel.clientId=YXA6Xmy_8DR5EeSg5PdilALHHg
weichat.tenants.experienceChannel.clientSecret=YXA6KUxxVR9pAnSBRPETeSLvkRhRyJw
weichat.tenants.experienceChannel.name=\u4f53\u9a8c\u5173\u8054
weichat.tenants.experienceChannel.description=\u73af\u4fe1\u6d4b\u8bd5\u5e10\u53f7\u5173\u8054
weichat.tenants.experienceChannel.password=123456
#体验关联创建失败重试
weichat.tenants.experienceChannel.retry=50

# ============================ send cloud configuration ==========================
sendCloud.mail.api_url=http://sendcloud.sohu.com/webapi/mail.send.json
sendCloud.mail.api_user=postmaster@easemobsub1.sendcloud.org
sendCloud.mail.api_key=FrSWshxmCZKO3Ub1
sendCloud.mail.from=kefu@easemob.com
sendCloud.mail.subject=\u8BF7\u67E5\u6536\u73AF\u4FE1\u5728\u7EBF\u5BA2\u670D\u9A8C\u8BC1\u7801

#============================= Storage service ==================================
#List all storage provider which need to be loaded, using qualified class name and separated by colon
#NFS: com.easemob.weichat.storage.NFSStorageProvider
#OSS: com.easemob.weichat.storage.OSSStorageProvider
storage.service.provider.list=com.easemob.weichat.storage.NFSStorageProvider
storage.service.provider.oss.url=http://oss-cn-beijing.aliyuncs.com
#Bucket name rule
# 1. lower case letter, digital and hyphen
# 2. lower case letter or digital at the beginning and ending
# 3. name length between 3 and 63
storage.service.provider.oss.bucket.name=kefu-dev-bucket
storage.service.provider.oss.accesskey.id=qyzt5uedNT3C3RtS
storage.service.provider.oss.accesskey.secret=Doafm2wJeC30rmFB8nIsn3oVjRk1Dw

kf.sevicesession.enquiry.day.max=30
# ============================ kefu kafka (not the one used for connector)==============
kefu.kafka.enabled=false
kefu.kafka.properties.bootstrap.servers=127.0.0.1:9092
#请回复相应数字，对我的服务做出评价：1. 非常满意 2. 满意 3. 一般 4. 不满意 5. 非常不满意
kf.sevicesession.enquiry.invite.messge=\u8bf7\u56de\u590d\u76f8\u5e94\u6570\u5b57\uff0c\u5bf9\u6211\u7684\u670d\u52a1\u505a\u51fa\u8bc4\u4ef7\uff1a\u0031\u002e\u0020\u975e\u5e38\u6ee1\u610f\u0020\u0032\u002e\u0020\u6ee1\u610f\u0020\u0033\u002e\u0020\u4e00\u822c\u0020\u0034\u002e\u0020\u4e0d\u6ee1\u610f\u0020\u0035\u002e\u0020\u975e\u5e38\u4e0d\u6ee1\u610f
#评论参数,访客按照提示回复消息进行评论(见参数kf.sevicesession.enquiry.invite.messge),回复的内容需要转换为相应的评分
#比如回复1代表非常满意,对应的评分为5;回复4为不满意,对应的评分为2
kf.sevicesession.enquiry.reply.mapper=1:5,2:4,3:3,4:2,5:1

# user different redis topic for gray release
kf.visitor.tocreate=visitor:to-create
kf.servicesession.tocreate=servicesession:to-create
kf.servicesession.msgtocreate=servicesession:msg:to-process:%s
kf.tenant.apps.user.tocreate=kf:tenantapp:user:to-create

#是否在查询未读消息时查询会话的originType
kf.unread.session-originType.enable=true

#最大的允许的线程数, 超出这个数字之后, /health会返回错误
#不能小于10, 默认为3000
kefu.server.thread.max=11
#metrics名称,记录访客队列队列的消费速度
visitor.creation.timer.name=kf.visitor.timer

# kefu rest service url
kf.rest.service.url=http://127.0.0.1:8585

#==============================kefu knowleage base =====================================
kefu.kb.es.host=127.0.0.1
kefu.kb.es.port=9300